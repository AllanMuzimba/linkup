rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Simplified helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Users collection - Allow users to read their own data and admins to read all
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated(); // Allow users to create their own document
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
    }
    
    // Stories collection
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      
      // Story views subcollection
      match /views/{viewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
      }
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || isAdmin());
      allow delete: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || isAdmin());
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.senderId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.senderId) || isAdmin());
      
      // Message reactions subcollection
      match /reactions/{reactionId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      }
    }
    
    // Likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Follows collection
    match /follows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && (isOwner(resource.data.followerId) || isAdmin());
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.toUserId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId) || isAdmin());
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id) || isAdmin());
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Analytics collection
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // System settings
    match /systemSettings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Bulk notifications
    match /bulkNotifications/{bulkId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}
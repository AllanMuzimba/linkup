rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['super_admin', 'level_admin'];
    }
    
    function isSuperAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && isOwner(resource.data.authorId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
    }
    
    // Stories collection
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && isOwner(resource.data.authorId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      
      // Story views subcollection
      match /views/{viewId} {
        allow read: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/stories/$(storyId)).data.authorId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      }
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participantIds;
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.senderId) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participantIds;
      allow update: if isAuthenticated() && isOwner(resource.data.senderId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.senderId) || isAdmin());
      
      // Message reactions subcollection
      match /reactions/{reactionId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(get(/databases/$(database)/documents/messages/$(messageId)).data.chatId)).data.participantIds;
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      }
    }
    
    // Likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Follows collection
    match /follows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.followerId);
      allow delete: if isAuthenticated() && isOwner(resource.data.followerId);
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromUserId);
      allow update: if isAuthenticated() && isOwner(resource.data.toUserId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId));
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id));
      allow create: if isAuthenticated() && (isOwner(request.resource.data.user1Id) || isOwner(request.resource.data.user2Id));
      allow update: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id));
      allow delete: if isAuthenticated() && (isOwner(resource.data.user1Id) || isOwner(resource.data.user2Id));
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Reports collection (admin access)
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Analytics collection (admin read-only, Cloud Functions write)
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // System settings (super admin only)
    match /systemSettings/{settingId} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }
    
    // Bulk notifications (admin only)
    match /bulkNotifications/{bulkId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}
